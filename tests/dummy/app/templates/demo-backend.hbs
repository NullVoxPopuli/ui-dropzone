{{#if requestInspector}}
  <h4>
    Front to Back Drops
  </h4>
  <row>
    <widget>
      {{drop-zone
        url=requestUrl
        addRemoveLinks=true
        useAjax=true
        onDrop=fileDropped
      }}
    </widget>
    <code>
      {{#code-block language='handlebars'}}\{{drop-zone
          url='{{requestUrl}}'
          addRemoveLinks=true
          useAjax=true
          onDrop=fileDropped
}}{{/code-block}}
    </code>
  </row>
  <description>
    <p>
      Here we'll leverage the very handy RequestBin service to listen as our server. When you drop a file onto the dropzone it should send it to our temporary bin.
    </p>
    <p>
      One nuance that we'll run into -- and this could be a real world scenario too -- is that we're submitting to a different URL than the client browser is being served from. Enter the dreaded CORS.
    </p>
    <p>
      <note>
        Right now the AJAX request WILL go through and send the POST request (which you will see in the backend) but browser security still indicates this is a CORS issue. I've talked to the team and they're hoping to get a CORs fix but until then you'll have to just live with the incorrect failure on the client side.
      </note>
    </p>
    <p>
      <note>
        Programmatically I have made it so that the RequestBin iframe reloads 5 seconds after drop a file but you can manually reload by clicking on the circle next to the URL below.
      </note>
    </p>
  </description>

  <br/>
  <p>
    Server Inspector
  </p>
  <iframe id="inspector-window" src="{{requestInspector}}" ></iframe>
{{else}}
  <h4>Procuring a test backend ... one moment please</h4>
{{/if}}
